@page
@model MiniAccountSystem.Pages.Vouchers.CreateModel
@{
    ViewData["Title"] = "Create Voucher";
}
<h2>Create Voucher</h2>

<form method="post">
    <div class="form-group">
        <label>Voucher Type</label>
        <select asp-for="VoucherType" class="form-control">
            <option value="Journal">Journal</option>
            <option value="Payment">Payment</option>
            <option value="Receipt">Receipt</option>
        </select>
    </div>
    <div class="form-group">
        <label>Reference No</label>
        <input asp-for="ReferenceNo" class="form-control" />
    </div>
    <div class="form-group">
        <label>Date</label>
        <input asp-for="VoucherDate" type="date" class="form-control" />
    </div>
    <div class="form-group">
        <button type="button" id="addEntry" class="btn btn-secondary">Add Entry</button>
        <button type="button" id="removeEntry" class="btn btn-danger">Remove Last</button>
    </div>

  
    <h4>Voucher Entries</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Account</th>
                <th>Debit</th>
                <th>Credit</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Model.Entries.Count; i++)
            {
                <tr>
                    <td>
                        <select asp-for="Entries[@i].AccountId" class="form-control" asp-items="Model.AccountList"></select>
                    </td>
                    <td>
                        <input asp-for="Entries[@i].DebitAmount" class="form-control" />
                    </td>
                    <td>
                        <input asp-for="Entries[@i].CreditAmount" class="form-control" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <button type="submit" class="btn btn-primary">Save Voucher</button>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        // Client-side validation
        $("form").submit(function(e) {
            let isValid = true;
            $("tbody tr").each(function() {
                const debit = parseFloat($(this).find("[name*='DebitAmount']").val()) || 0;
                const credit = parseFloat($(this).find("[name*='CreditAmount']").val()) || 0;

                if (debit > 0 && credit > 0) {
                    alert("An entry cannot have both debit and credit amounts!");
                    isValid = false;
                    return false;
                }
            });
            return isValid;
        });

        // Dynamic row management
        document.getElementById('addEntry').addEventListener('click', function() {
            const index = document.querySelectorAll('tbody tr').length;
            const template = `
                <tr>
                    <td>
                        <select name="Entries[${index}].AccountId" class="form-control">
        @foreach (var item in Model.AccountList)
        {
                                    <option value="@item.Value">@item.Text</option>
        }
                        </select>
                    </td>
                    <td>
                        <input name="Entries[${index}].DebitAmount" class="form-control" />
                    </td>
                    <td>
                        <input name="Entries[${index}].CreditAmount" class="form-control" />
                    </td>
                </tr>`;
            document.querySelector('tbody').insertAdjacentHTML('beforeend', template);
        });

        document.getElementById('removeEntry').addEventListener('click', function() {
            const rows = document.querySelectorAll('tbody tr');
            if (rows.length > 1) { 
                rows[rows.length - 1].remove();
            }
        });
    </script>
}