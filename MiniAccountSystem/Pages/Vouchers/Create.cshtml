@page
@model CreateModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    ViewData["Title"] = "Create Voucher";
}

<div class="card shadow-sm">
    <div class="card-header bg-primary text-white">
        <h2 class="mb-0">Create Voucher</h2>
    </div>
    <div class="card-body">
        <form method="post">
            <div class="row mb-4">
                <div class="col-md-4">

                    <label class="form-label">Voucher Type</label>
                    <select asp-for="Voucher.VoucherType" class="form-select">
                        <option>Journal</option>
                        <option>Payment</option>
                        <option>Receipt</option>
                    </select>
                    @* <label>Voucher Type</label> *@

                </div>
                <div class="col-md-4">

                    <label class="form-label">Date</label>
                    <input asp-for="Voucher.VoucherDate" type="date" class="form-control" value="@DateTime.Now.ToString("yyyy-MM-dd")" />


                </div>
                <div class="col-md-4">

                    <label class="form-label">Reference No</label>
                    <input asp-for="Voucher.ReferenceNo" class="form-control" />

                </div>
            </div>
            <hr />
            <h5 class="mb-3 border-bottom pb-2">Voucher Details</h5>

            <div id="voucherDetailsContainer">
                @for (int i = 0; i < Model.Voucher.VoucherDetails.Count; i++)
                {
                    <div class="row mb-3 voucher-row align-items-center">
                        <div class="col-md-5">
                            <select name="Voucher.VoucherDetails[@i].AccountId" class="form-select">
                                @foreach (var acc in Model.AccountList)
                                {
                                    <option value="@acc.Value">@acc.Text</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-3">
                            <div class="input-group">
                                <span class="input-group-text">৳</span>
                                <input name="Voucher.VoucherDetails[@i].DebitAmount" class="form-control" placeholder="Debit" />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="input-group">
                                <span class="input-group-text">৳</span>
                                <input name="Voucher.VoucherDetails[@i].CreditAmount" class="form-control" placeholder="Credit" />
                            </div>
                        </div>
                        <div class="col-md-1 text-end">
                            <button type="button" class="btn btn-sm btn-outline-danger remove-row">
                                <i class="bi bi-trash">Remove</i>
                            </button>
                        </div>
                    </div>
                }
            </div>

            <div class="d-flex justify-content-between mt-4">
                <button type="button" class="btn btn-outline-primary" id="addRow">
                    <i class="bi bi-plus-circle"></i> Add Line
                </button>
                <button type="submit" class="btn btn-outline-primary px-4">
                    <i class="bi bi-save"></i> Save Voucher
                </button>
            </div>
        </form>
    </div>
</div>

@if (!string.IsNullOrEmpty(ViewData["Error"]?.ToString()))
{
    <div class="alert alert-danger mt-3">@ViewData["Error"]</div>
}

@section Scripts {
    <script>
        let rowIndex = @Model.Voucher.VoucherDetails.Count;
        const accountOptions = `@Html.Raw(string.Join("", Model.AccountList.Select(a => $"<option value='{a.Value}'>{a.Text}</option>")))`;

        function renderRow(index) {
            return `
                <div class="row mb-3 voucher-row align-items-center">
                    <div class="col-md-5">
                        <select name="Voucher.VoucherDetails[${index}].AccountId" class="form-select">
                            ${accountOptions}
                        </select>
                    </div>
                    <div class="col-md-3">
                        <div class="input-group">
                            <span class="input-group-text">৳</span>
                            <input name="Voucher.VoucherDetails[${index}].DebitAmount" class="form-control" placeholder="Debit" />
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="input-group">
                            <span class="input-group-text">৳</span>
                            <input name="Voucher.VoucherDetails[${index}].CreditAmount" class="form-control" placeholder="Credit" />
                        </div>
                    </div>
                    <div class="col-md-1 text-end">
                        <button type="button" class="btn btn-sm btn-outline-danger remove-row">
                            <i class="bi bi-trash">Remove</i>
                        </button>
                    </div>
                </div>
            `;
        }

        function reindexRows() {
            let rows = document.querySelectorAll("#voucherDetailsContainer .voucher-row");
            rows.forEach((row, i) => {
                row.querySelectorAll("select, input").forEach(input => {
                    if (input.name.includes("AccountId"))
                        input.name = `Voucher.VoucherDetails[${i}].AccountId`;
                    else if (input.name.includes("DebitAmount"))
                        input.name = `Voucher.VoucherDetails[${i}].DebitAmount`;
                    else if (input.name.includes("CreditAmount"))
                        input.name = `Voucher.VoucherDetails[${i}].CreditAmount`;
                });
            });
            rowIndex = rows.length;
        }

        $('#addRow').click(function () {
            $('#voucherDetailsContainer').append(renderRow(rowIndex));
            rowIndex++;
        });

        $(document).on('click', '.remove-row', function () {
            $(this).closest('.voucher-row').remove();
            reindexRows();
        });
    </script>
}























@* @page *@
@* @model MiniAccountSystem.Pages.Vouchers.CreateModel *@
@* @{ *@
@*     ViewData["Title"] = "Create Voucher"; *@
@* } *@

@* <h2 class="mb-4">Create Voucher</h2> *@

@*  *@
@* @if (!string.IsNullOrEmpty(Model.Message)) *@
@* { *@
@*     <div class="alert alert-success alert-dismissible fade show" role="alert"> *@
@*         @Model.Message *@
@*         <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button> *@
@*     </div> *@
@* } *@
@* @if (!string.IsNullOrEmpty(Model.ErrorMessage)) *@
@* { *@
@*     <div class="alert alert-danger alert-dismissible fade show" role="alert"> *@
@*         @Model.ErrorMessage *@
@*         <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button> *@
@*     </div> *@
@* } *@

@* <form method="post"> *@
@*     <div asp-validation-summary="ModelOnly" class="text-danger"></div> *@

@*     <div class="form-group mb-3"> *@
@*         <label asp-for="VoucherType" class="form-label">Voucher Type</label> *@
@*         <select asp-for="VoucherType" class="form-control"> *@
@*             <option value="Journal">Journal</option> *@
@*             <option value="Payment">Payment</option> *@
@*             <option value="Receipt">Receipt</option> *@
@*         </select> *@
@*         <span asp-validation-for="VoucherType" class="text-danger"></span> *@
@*     </div> *@
@*     <div class="form-group mb-3"> *@
@*         <label asp-for="ReferenceNo" class="form-label">Reference No</label> *@
@*         <input asp-for="ReferenceNo" class="form-control" /> *@
@*         <span asp-validation-for="ReferenceNo" class="text-danger"></span> *@
@*     </div> *@
@*     <div class="form-group mb-3"> *@
@*         <label asp-for="VoucherDate" class="form-label">Date</label> *@
@*         <input asp-for="VoucherDate" type="date" class="form-control" /> *@
@*         <span asp-validation-for="VoucherDate" class="text-danger"></span> *@
@*     </div> *@

@*     <h4 class="mt-4 mb-3">Voucher Entries</h4> *@
@*     <table class="table table-bordered"> *@
@*         <thead> *@
@*             <tr> *@
@*                 <th style="width: 40%;">Account</th> *@
@*                 <th style="width: 25%;">Debit</th> *@
@*                 <th style="width: 25%;">Credit</th> *@
@*                 <th style="width: 10%;"></th> *@
@*             </tr> *@
@*         </thead> *@
@*         <tbody> *@
@*              *@
@*             @for (int i = 0; i < Model.Entries.Count; i++) *@
@*             { *@
@*                 <tr> *@
@*                     <td> *@
@*                        *@
@*                         <select asp-for="Entries[@i].AccountId" class="form-control" asp-items="Model.AccountList"></select> *@
@*                         <span asp-validation-for="Entries[@i].AccountId" class="text-danger"></span> *@
@*                     </td> *@
@*                     <td> *@
@*                         <input asp-for="Entries[@i].DebitAmount" type="number" step="0.01" class="form-control debit-amount" /> *@
@*                         <span asp-validation-for="Entries[@i].DebitAmount" class="text-danger"></span> *@
@*                     </td> *@
@*                     <td> *@
@*                         <input asp-for="Entries[@i].CreditAmount" type="number" step="0.01" class="form-control credit-amount" /> *@
@*                         <span asp-validation-for="Entries[@i].CreditAmount" class="text-danger"></span> *@
@*                     </td> *@
@*                     <td> *@
@*                      *@
@*                         @if (Model.Entries.Count > 2) // Allow removing if more than 2 default entries *@
@*                         { *@
@*                             <button type="button" class="btn btn-danger btn-sm remove-entry">X</button> *@
@*                         } *@
@*                     </td> *@
@*                 </tr> *@
@*             } *@
@*         </tbody> *@
@*     </table> *@

@*     <div class="d-flex justify-content-between mb-4"> *@
@*         <div> *@
@*             <button type="button" id="addEntry" class="btn btn-secondary me-2">Add Entry</button> *@
@*             <button type="button" id="removeLastEntry" class="btn btn-danger">Remove Last</button> *@
@*         </div> *@
@*         <button type="submit" class="btn btn-primary">Save Voucher</button> *@
@*     </div> *@
@* </form> *@

@* @section Scripts { *@
@*     <partial name="_ValidationScriptsPartial" /> *@

@*     <script> *@
@*         @{ *@
@*             string optionsHtml = ""; *@
@*             // Model.AccountList null না হয় তা নিশ্চিত করুন *@
@*             if (Model.AccountList != null) *@
@*             { *@
@*                 foreach (var item in Model.AccountList) *@
@*                 { *@
@*                     // C# স্ট্রিং কনক্যাটেনেশন ব্যবহার করে অপশন ট্যাগ তৈরি করুন *@
@*                     optionsHtml += $"<option value=\"{item.Value}\">{item.Text}</option>"; *@
@*                 } *@
@*             } *@
@*         } *@

@*         // JavaScript এ HTML স্ট্রিং অ্যাসাইন করুন। Html.Raw ব্যবহার করা হয়েছে এনকোডিং এড়াতে। *@
@*         const accountOptionsTemplate = document.createElement('div'); *@
@*         accountOptionsTemplate.style.display = 'none'; *@
@*         accountOptionsTemplate.innerHTML = "@Html.Raw(optionsHtml)"; *@
@*         document.body.appendChild(accountOptionsTemplate); *@

@*         // Helper function to re-index all entry rows after adding or removing *@
@*         function reindexEntries() { *@
@*             $("tbody tr").each(function(idx) { *@
@*                 $(this).find("select[name^='Entries[']").attr("name", `Entries[${idx}].AccountId`); *@
@*                 $(this).find("input[name^='Entries['][name$='.DebitAmount']").attr("name", `Entries[${idx}].DebitAmount`); *@
@*                 $(this).find("input[name^='Entries['][name$='.CreditAmount']").attr("name", `Entries[${idx}].CreditAmount`); *@
@*             }); *@
@*         } *@
@*         // Client-side validation for form submission *@
@*         $("form").submit(function(e) { *@
@*             let isValid = true; *@
@*             let totalDebit = 0; *@
@*             let totalCredit = 0; *@

@*             // Iterate through each voucher entry row *@
@*             $("tbody tr").each(function(index) { *@
@*                 const debitInput = $(this).find(".debit-amount"); *@
@*                 const creditInput = $(this).find(".credit-amount"); *@

@*                 const debitVal = debitInput.length ? debitInput.val() : ''; *@
@*                 const creditVal = creditInput.length ? creditInput.val() : ''; *@

@*                 const debit = parseFloat(debitVal) || 0; *@
@*                 const credit = parseFloat(creditVal) || 0; *@

@*                 if (debit > 0 && credit > 0) { *@
@*                     alert("An entry cannot have both debit and credit amounts!"); *@
@*                     isValid = false; *@
@*                     return false; // Break the each loop *@
@*                 } *@

@*                 if (debit === 0 && credit === 0 && (debitVal !== '' || creditVal !== '')) { *@
@*                     alert(`Row ${index + 1}: Please enter a valid numeric value for either Debit or Credit.`); *@
@*                     isValid = false; *@
@*                     return false; *@
@*                 } *@

@*                 totalDebit += debit; *@
@*                 totalCredit += credit; *@
@*             }); *@

@*             totalDebit = parseFloat(totalDebit.toFixed(2)); *@
@*             totalCredit = parseFloat(totalCredit.toFixed(2)); *@

@*             if (isValid && totalDebit !== totalCredit) { *@
@*                 alert(`Total Debits (${totalDebit.toFixed(2)}) must equal Total Credits (${totalCredit.toFixed(2)})!`); *@
@*                 isValid = false; *@
@*             } *@

@*             // Ensure at least one debit or credit amount is provided for the entire voucher *@
@*             if (isValid && totalDebit === 0 && totalCredit === 0 && $("tbody tr").length > 0) { *@
@*                  // Check if any specific entry has a non-zero value *@
@*                 const hasNonZeroEntry = Array.from(document.querySelectorAll('.debit-amount, .credit-amount')).some(input => parseFloat(input.value) > 0); *@
@*                 if (!hasNonZeroEntry) { *@
@*                     alert("Please enter at least one debit or credit amount for the voucher."); *@
@*                     isValid = false; *@
@*                 } *@
@*             } *@


@*             if (!isValid) { *@
@*                 e.preventDefault(); *@
@*             } *@

@*             return isValid; *@
@*         }); *@

@*         // Dynamic row addition *@
@*         document.getElementById('addEntry').addEventListener('click', function() { *@
@*             const index = document.querySelectorAll('tbody tr').length; *@
@*             const newRow = document.createElement('tr'); *@
@*             newRow.innerHTML = ` *@
@*                 <td> *@
@*                     <select name="Entries[${index}].AccountId" class="form-control"></select> *@
@*                 </td> *@
@*                 <td> *@
@*                     <input name="Entries[${index}].DebitAmount" type="number" step="0.01" class="form-control debit-amount" /> *@
@*                 </td> *@
@*                 <td> *@
@*                     <input name="Entries[${index}].CreditAmount" type="number" step="0.01" class="form-control credit-amount" /> *@
@*                 </td> *@
@*                 <td> *@
@*                     <button type="button" class="btn btn-danger btn-sm remove-entry">X</button> *@
@*                 </td>`; *@

@*             document.querySelector('tbody').appendChild(newRow); *@

@*             // Populate the AccountId dropdown in the new row *@
@*             const newSelect = newRow.querySelector('select[name*="AccountId"]'); *@
@*             if (newSelect) { *@
@*                 $(accountOptionsTemplate).find('option').each(function() { *@
@*                     $(this).clone().appendTo(newSelect); *@
@*                 }); *@
@*             } *@
@*         }); *@

@*         // Dynamic row removal (for last entry) *@
@*         document.getElementById('removeLastEntry').addEventListener('click', function() { *@
@*             const rows = document.querySelectorAll('tbody tr'); *@
@*             if (rows.length > 2) { // Ensure at least 2 rows remain as per server-side validation *@
@*                 rows[rows.length - 1].remove(); *@
@*                 reindexEntries(); // Re-index all rows after removal *@
@*             } else { *@
@*                 alert("At least two entries are required for a voucher."); *@
@*             } *@
@*         }); *@

@*         // Dynamic row removal (for any entry via 'X' button) *@
@*         $(document).on('click', '.remove-entry', function() { *@
@*             const rows = document.querySelectorAll('tbody tr'); *@
@*             if (rows.length > 2) { *@
@*                 $(this).closest('tr').remove(); *@
@*                 reindexEntries(); // Re-index all rows after removal *@
@*             } else { *@
@*                 alert("At least two entries are required for a voucher."); *@
@*             } *@
@*         }); *@

@*         // Event listeners for debit/credit input changes to prevent both from being entered *@
@*         $(document).on('input', '.debit-amount', function() { *@
@*             const row = $(this).closest('tr'); *@
@*             const creditInput = row.find('.credit-amount'); *@
@*             if (parseFloat($(this).val()) > 0) { *@
@*                 creditInput.val(''); // Clear credit if debit is entered *@
@*             } *@
@*         }); *@

@*         $(document).on('input', '.credit-amount', function() { *@
@*             const row = $(this).closest('tr'); *@
@*             const debitInput = row.find('.debit-amount'); *@
@*             if (parseFloat($(this).val()) > 0) { *@
@*                 debitInput.val(''); // Clear debit if credit is entered *@
@*             } *@
@*         }); *@
@*     </script> *@
@* } *@