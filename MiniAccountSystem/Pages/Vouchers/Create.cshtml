@page
@model MiniAccountSystem.Pages.Vouchers.CreateModel
@{
    ViewData["Title"] = "Create Voucher";
}
<h2>Create Voucher</h2>

<form method="post">
    <div class="form-group">
        <label>Voucher Type</label>
        <select asp-for="VoucherType" class="form-control">
            <option value="Journal">Journal</option>
            <option value="Payment">Payment</option>
            <option value="Receipt">Receipt</option>
        </select>
    </div>
    <div class="form-group">
        <label>Reference No</label>
        <input asp-for="ReferenceNo" class="form-control" />
    </div>
    <div class="form-group">
        <label>Date</label>
        <input asp-for="VoucherDate" type="date" class="form-control" />
    </div>
    <div class="form-group">
        <button type="button" id="addEntry" class="btn btn-secondary">Add Entry</button>
        <button type="button" id="removeEntry" class="btn btn-danger">Remove Last</button>
    </div>

  
    <h4>Voucher Entries</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Account</th>
                <th>Debit</th>
                <th>Credit</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Model.Entries.Count; i++)
            {
                <tr>
                    <td>
                        <select asp-for="Entries[@i].AccountId" class="form-control" asp-items="Model.AccountList"></select>
                    </td>
                    <td>
                        <input asp-for="Entries[@i].DebitAmount" class="form-control" />
                    </td>
                    <td>
                        <input asp-for="Entries[@i].CreditAmount" class="form-control" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <button type="submit" class="btn btn-primary">Save Voucher</button>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
       
        const accountOptionsTemplate = document.createElement('div');
        accountOptionsTemplate.style.display = 'none';
        accountOptionsTemplate.innerHTML = `
        @foreach (var item in Model.AccountList)
        {
                    <option value="@item.Value">@item.Text</option>
        }
        `;
        document.body.appendChild(accountOptionsTemplate);
               // Client-side validation
        $("form").submit(function(e) {
            let isValid = true;
            let totalDebit = 0;
            let totalCredit = 0;

            // Iterate through each table row within the tbody
            $("tbody tr").each(function(index, row) {
                // Find the debit and credit input fields within the current row
                const debitInput = $(row).find("input[name$='.DebitAmount']"); // name ends with '.DebitAmount'
                const creditInput = $(row).find("input[name$='.CreditAmount']"); // name ends with '.CreditAmount'

                // Get the value, default to empty string if input not found
                const debitVal = debitInput.length ? debitInput.val() : '';
                const creditVal = creditInput.length ? creditInput.val() : '';

                console.log(`Row ${index}: Raw Debit val: '${debitVal}', Raw Credit val: '${creditVal}'`);

                // Parse to float, defaulting to 0 if parsing fails (e.g., empty string or non-numeric)
                const debit = parseFloat(debitVal) || 0;
                const credit = parseFloat(creditVal) || 0;

                console.log(`Row ${index}: Parsed Debit: ${debit}, Parsed Credit: ${credit}`);

                if (debit > 0 && credit > 0) {
                    alert("An entry cannot have both debit and credit amounts!");
                    isValid = false;
                    return false; // Break the each loop
                }

                totalDebit += debit;
                totalCredit += credit;
            });
                // Round to a reasonable number of decimal places (e.g., 2 for currency)
        totalDebit = parseFloat(totalDebit.toFixed(2));
        totalCredit = parseFloat(totalCredit.toFixed(2));
        console.log(`Final Totals: Total Debit: ${totalDebit}, Total Credit: ${totalCredit}`);

        if (isValid && totalDebit !== totalCredit) {
            alert("Total Debits must equal Total Credits!");
            isValid = false;
        }

            // Ensure at least one entry has a non-zero debit or credit, if desired
            if (isValid && totalDebit === 0 && totalCredit === 0 && Model.Entries.length > 0) {
                alert("Please enter at least one debit or credit amount.");
                isValid = false;
            }


            if (!isValid) {
                e.preventDefault(); // Prevent form submission if validation fails
            }

            return isValid;
        });


        // Dynamic row management (as provided in previous good answer)
        document.getElementById('addEntry').addEventListener('click', function() {
            const index = document.querySelectorAll('tbody tr').length;
            const newRow = document.createElement('tr');
            newRow.innerHTML = `
                <td>
                    <select name="Entries[${index}].AccountId" class="form-control"></select>
                </td>
                <td>
                    <input name="Entries[${index}].DebitAmount" class="form-control" value="0" />
                </td>
                <td>
                    <input name="Entries[${index}].CreditAmount" class="form-control" value="0" />
                </td>`;

            document.querySelector('tbody').appendChild(newRow);

            const newSelect = newRow.querySelector('select[name*="AccountId"]');
            if (newSelect) {
                $(accountOptionsTemplate).find('option').each(function() {
                    $(this).clone().appendTo(newSelect);
                });
            }
        });

        document.getElementById('removeEntry').addEventListener('click', function() {
            const rows = document.querySelectorAll('tbody tr');
            if (rows.length > 1) {
                rows[rows.length - 1].remove();
            }
        });
    </script>
}